#from ssd1306 import SSD1306_I2C # I2C driver interface for OLED
#from machine import Pin, I2C # Generic Pin and I2C object

#i2c = I2C(1, scl = Pin(15), sda = Pin(14)) # I2C interface
#oled = SSD1306_I2C(128, 64, i2c) # Initialize OLED


logo = bytearray([
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x07, 0xF8, 0x3F, 0xE0, 0x0F, 0xFE, 0x7F, 0xF0,
0x1F, 0xFE, 0x7F, 0xF8, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xEF, 0xF8, 0x3F, 0xFF, 0xCF, 0xFC,
0x3F, 0xFF, 0xC7, 0xFC, 0x3F, 0xFF, 0x87, 0xFC, 0x3F, 0xFF, 0x83, 0xFC, 0x3F, 0xFF, 0x93, 0xFC,
0x1F, 0xE7, 0x31, 0xF8, 0x1F, 0xE7, 0x39, 0xF8, 0x10, 0x02, 0x38, 0x00, 0x08, 0x1A, 0x7C, 0x00,
0x07, 0xF8, 0x7F, 0xE0, 0x03, 0xF8, 0xFF, 0xC0, 0x01, 0xFC, 0xFF, 0x80, 0x00, 0xFD, 0xFF, 0x00,
0x00, 0x7F, 0xFC, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x03, 0xC0, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
])

derp = bytearray([
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
0x0e, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x20, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00,
0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
0x40, 0x00, 0x01, 0xe1, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x90, 0xc0, 0x00, 0x01, 0x80, 0x00,
0x02, 0x08, 0x40, 0x00, 0x03, 0x00, 0x00, 0x04, 0x1c, 0xc0, 0x00, 0x02, 0x00, 0x00, 0x08, 0x3e,
0x00, 0x00, 0x14, 0x00, 0x00, 0x10, 0x3d, 0x60, 0x00, 0x18, 0x00, 0x00, 0x10, 0x1c, 0x20, 0x00,
0x10, 0x1b, 0x80, 0x00, 0x00, 0x80, 0x00, 0x10, 0x40, 0xc0, 0x00, 0x00, 0x10, 0x00, 0x30, 0x80,
0x60, 0x00, 0x00, 0x48, 0x00, 0x31, 0x80, 0x28, 0x10, 0x00, 0x4c, 0x00, 0x01, 0xe0, 0x08, 0x08,
0x00, 0x4c, 0x00, 0x21, 0xe0, 0x08, 0x04, 0x00, 0x48, 0x00, 0x21, 0xe0, 0x10, 0x02, 0x00, 0x82,
0x00, 0xc1, 0x80, 0x10, 0x00, 0xc1, 0x05, 0x00, 0xc1, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0xc0,
0x00, 0x40, 0x00, 0x00, 0x03, 0x00, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x03, 0x00, 0xc0, 0x81, 0x00,
0x00, 0x00, 0x03, 0x00, 0xc0, 0x42, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00,
0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00,
0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x7f, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0xc1,
0xc0, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x60, 0x01, 0x00, 0x50, 0x00, 0x01, 0x00, 0x20, 0x01,
0x80, 0x10, 0x00, 0x01, 0x00, 0x20, 0x01, 0x80, 0x10, 0x00, 0x01, 0x00, 0x00, 0x01, 0x80, 0x20,
0x00, 0x01, 0x80, 0x00, 0x01, 0x00, 0x18, 0x00, 0x01, 0x80, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00,
0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00,
0x02, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
0x04, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08,
0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00
])

small_heart = [
[ 0, 1, 1, 0, 0, 0, 1, 1, 0],
[ 1, 1, 1, 1, 0, 1, 1, 1, 1],
[ 1, 1, 1, 1, 1, 1, 1, 1, 1],
[ 1, 1, 1, 1, 1, 1, 1, 1, 1],
[ 0, 1, 1, 1, 1, 1, 1, 1, 0],
[ 0, 0, 1, 1, 1, 1, 1, 0, 0],
[ 0, 0, 0, 1, 1, 1, 0, 0, 0],
[ 0, 0, 0, 0, 1, 0, 0, 0, 0],
]

big_heart = [   
[ 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0],
[ 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0],
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
[ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
[ 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
[ 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
[ 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
[ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
]


class Graphic:
    
    def __init__(self, oled, center_line = 32, amplitude = 18, start_width = 0, end_width = 127):
        self.oled = oled
        ###############################
        self.center_line = center_line # Center line of graph in y axis
        self.amplitude = amplitude # Amplitude of the graph from the center line 
        self.start_width = start_width # Start point of graph in x axis
        self.end_width = end_width # End point of graph in x axis
        self.step = 10 #display every {step}th value
        ###############################
        self.x1 = self.start_width - 1
        self.y1 = self.center_line
        self.ymax = 1500
        ###############################
        self.beat = True # Heartbeat triggered at True, from small heart to big
        self.beat_counter = 0 # Counter for reverting back to small heart
        #self.reset()
        
    def update_ymax(self, y):
        if y > self.ymax: # positive maximum found
            self.ymax = y
        elif y < -self.ymax: # negative maximum found
            self.ymax = -y
        else: # Decrease the maximum a small amout (0.5%)
            self.ymax *= 0.995
        return self.ymax
    
    def graph(self, y, count):
        self.update_ymax(y)
        
        # Show screen frame, used for element positioning
        #self.oled.rect(0, 0, 128 , 64, 1)
        
        # Show graph frame
        #self.oled.rect(self.start_width, self.center_line-self.amplitude-1, self.end_width-self.start_width+1, self.amplitude*2+3, 1) 
        
        # Show center line
        #self.oled.line(self.start_width, self.center_line, self.end_width, self.center_line, 1)
        
        if count % self.step == 0:
            y2 = int(self.amplitude*y/self.ymax + self.center_line) # Scale the value to fit into OLED
            self.oled.line(self.x1+1, self.center_line-self.amplitude-1, self.x1+1, self.center_line+self.amplitude, 0) #clear column
            self.oled.line(self.x1, self.y1, self.x1+1, y2, 1)
            self.oled.show()
            self.x1 += 1
            if self.x1 == self.end_width:
                self.x1 = self.start_width - 1
            self.y1 = y2
        
        self.status_msg(count) 
        
    def clear_graph(self):
        self.oled.fill_rect(self.start_width, self.center_line-self.amplitude-1, self.end_width-self.start_width+1, self.amplitude*2+3, 0)
    
    def status_msg(self, count): # Footer messages, etc.
        if count < 250:
            self.oled.text('calibrating.', 0, 56)
        elif count >= 250 and count < 500:
            self.oled.text('calibrating..', 0, 56)
        elif count >= 500 and count < 750:
            self.oled.text('calibrating...', 0, 56)
        elif count >= 750 and count < 1000:
            self.oled.text('calibrating....', 0, 56)
        else:
            self.oled.fill_rect(0, 56, 128, 8, 0)
            self.oled.text('press to stop', 12, 56)
    
    def show_bpm(self, peak, bpm):
        if peak:
            self.oled.fill_rect(13, 0, 66, 10, 0)
            self.oled.text(f'{bpm}bpm', 13, 1)
    
    def small_heart(self):
        self.oled.fill_rect(0, 0, 11, 11, 0)
        for y, row in enumerate(small_heart):
            for b, c in enumerate(row):
                self.oled.pixel(b+1, y+1, c)
        #self.oled.show()
        
    def big_heart(self):
        self.oled.fill_rect(0, 0, 11, 11, 0)
        for y, row in enumerate(big_heart):
            for b, c in enumerate(row):
                self.oled.pixel(b, y, c)
        #self.oled.show()
    
    def beating_heart(self, peak, count):
        if peak:
            self.big_heart()
            self.beat = True
            self.beat_counter = count
        else:
            if self.beat and (count - self.beat_counter) > 25:
                self.small_heart()
                self.beat = False
                
    def show_time(self, duration):
        self.oled.fill_rect(88, 0, 40, 10, 0)
        self.oled.text(f'{duration//60}m{duration%60:02d}s', 88, 1)
    
